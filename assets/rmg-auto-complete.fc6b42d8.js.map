{"version":3,"file":"rmg-auto-complete.fc6b42d8.js","sources":["../../src/rmg-auto-complete/popover-implement/rmg-auto-complete.tsx"],"sourcesContent":["import {\n    Box,\n    Button,\n    List,\n    ListItem,\n    Popover,\n    PopoverAnchor,\n    PopoverBody,\n    PopoverContent,\n    useOutsideClick,\n} from '@chakra-ui/react';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { RmgDebouncedInput } from '../../rmg-debounced-input';\n\nexport interface RmgAutoCompleteProps<T> {\n    data: T[];\n    displayValue: (item: T) => string;\n    displayHandler?: (item: T) => ReactElement | string | number;\n    predicate: (item: T, input: string) => boolean;\n    defaultValue?: T;\n    onChange?: (item: T) => void;\n    isInvalid?: boolean; // inherit from chakra input\n}\n\nexport function RmgAutoComplete<T extends { id: string }>(props: RmgAutoCompleteProps<T>) {\n    const { data, displayValue, displayHandler, predicate, defaultValue, onChange, isInvalid } = props;\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const [inputValue, setInputValue] = useState(defaultValue ? displayValue(defaultValue) : '');\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n    useOutsideClick({ ref: wrapperRef, handler: () => setIsDropdownOpen(false) });\n\n    useEffect(\n        () => {\n            if (defaultValue) {\n                setInputValue(displayValue(defaultValue));\n            } else {\n                setInputValue('');\n            }\n        },\n        // force update input field when data is changed\n        // to prevent last selected text remains on the field if defaultValue are undefined before and after\n        [JSON.stringify(data), JSON.stringify(defaultValue)]\n    );\n\n    const handleSelect = (item: T) => {\n        setInputValue(displayValue(item));\n        setIsDropdownOpen(false);\n        onChange?.(item);\n    };\n\n    return (\n        <Box ref={wrapperRef}>\n            <Popover placement=\"bottom-start\" isOpen={isDropdownOpen} autoFocus={false}>\n                <PopoverAnchor>\n                    <RmgDebouncedInput\n                        defaultValue={inputValue}\n                        onDebouncedChange={val => setInputValue(val)}\n                        onFocus={() => setIsDropdownOpen(true)}\n                        isInvalid={isInvalid}\n                    />\n                </PopoverAnchor>\n\n                <PopoverContent w=\"unset\" minW={200}>\n                    <PopoverBody p={0}>\n                        <List role=\"menu\" maxH={270} overflowY=\"auto\">\n                            {data\n                                .filter(item => predicate(item, inputValue))\n                                .map(item => (\n                                    <ListItem key={item.id} role=\"none\">\n                                        <Button\n                                            role=\"menuitem\"\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            justifyContent=\"flex-start\"\n                                            flexShrink={0}\n                                            borderRadius={0}\n                                            w=\"100%\"\n                                            onClick={() => handleSelect(item)}\n                                        >\n                                            {displayHandler ? displayHandler(item) : displayValue(item)}\n                                        </Button>\n                                    </ListItem>\n                                ))}\n                        </List>\n                    </PopoverBody>\n                </PopoverContent>\n            </Popover>\n        </Box>\n    );\n}\n"],"names":["RmgAutoComplete","props","data","displayValue","displayHandler","predicate","defaultValue","onChange","isInvalid","wrapperRef","useRef","inputValue","setInputValue","useState","isDropdownOpen","setIsDropdownOpen","useOutsideClick","useEffect","handleSelect","__name","item","_jsx","Box","PopoverAnchor","RmgDebouncedInput","PopoverContent","PopoverBody","List","ListItem","Button"],"mappings":"oZAwBO,SAAAA,EAAAC,EAAA,CACH,KAAA,CAAM,KAAAC,EAAEA,aAAAA,EAAMC,eAAAA,EAAcC,UAAAA,EAAgBC,aAAAA,EAAWC,SAAAA,EAAcC,UAAAA,CAAUC,EAAAA,EAE/EC,EAAAC,iBAAA,IAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAAP,EAAAH,EAAAG,CAAA,EAAA,EAAA,EACA,CAAAQ,EAAAC,CAAA,EAAAF,EAAA,QAAA,SAAA,EAAA,EAEAG,EAAAA,CAAgB,IAAAP,EAAOA,QAAAA,IAAAA,EAAAA,EAAAA,CAAkD,CAAA,EAEzEQ,EAAAA,QAAAA,UAAAA,IAAAA,CAGYL,EADJN,EACIM,EAAAA,CAAAA,EAEAA,EAFAA,CAGJ,EACJ,CAAA,KAAA,UAAAV,CAAA,EAAA,KAAA,UAAAI,CAAA,CAAA,CAGmD,EAGvD,MAAAY,EAAAC,EAAAC,GAAA,CACIR,EAAAA,EAAAA,CAAAA,CAAAA,EACAG,EAAAA,EAAAA,EACAR,GAAAA,MAAAA,EAAAA,EAAe,EAHnB,gBAMA,OAAAc,EAAAC,EAAA,CACQ,IAAAb,EAAMA,SAAAA,EAAAA,EAAAA,CACE,UAAA,eAAW,OAAAK,EAAuBA,UAAAA,GAA2B,SAAA,CAAAO,EAAAE,EAAA,CACnD,SAAAF,EAAAG,EAAA,CACQ,aAAAb,EACAA,kBAAAA,GAAAA,EAAAA,CAAAA,EAC6B,QAAA,IAAAI,EAAA,EAAA,EACN,UAAAP,CACrC,CAAA,CAAqB,CAAA,EAAAa,EAAAI,EAAA,CAId,EAAA,QAAG,KAAA,IAAc,SAAAJ,EAAAK,EAAA,CAChB,EAAA,EAAI,SAAAL,EAAAM,EAAA,CACP,KAAA,OAAM,KAAA,IAAa,UAAA,OAAe,SAAAzB,EAAA,OAAAkB,GAAAf,EAAAe,EAAAT,CAAA,CAAA,EAAA,IAAAS,GAAAC,EAAAO,EAAA,CAIlB,KAAA,OAAoB,SAAAP,EAAAQ,EAAA,CAClB,KAAA,WACE,KAAA,KACA,QAAA,QACG,eAAA,aACO,WAAA,EACH,aAAA,EACE,EAAA,OACZ,QAAA,IAAAX,EAAAE,CAAA,EAC8B,SAAAhB,EAAAA,EAAAgB,CAAA,EAAAjB,EAAAiB,CAAA,CAE0B,CAAA,CAAC,EAAAA,EAAA,EAAA,CAAA,CAGtE,CAAA,CAAC,CAAA,CACH,CAAA,CAAA,CAEE,CAAA,CAAA,CAAA,CAIjC,CAnEOD,EAAAnB,EAAA"}