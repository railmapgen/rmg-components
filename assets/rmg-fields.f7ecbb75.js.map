{"version":3,"file":"rmg-fields.f7ecbb75.js","sources":["../../node_modules/@chakra-ui/switch/dist/index.esm.js","../../src/rmg-fields/rmg-fields.tsx"],"sourcesContent":["// ../../../react-shim.js\nimport React from \"react\";\n\n// src/switch.tsx\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\nvar dataAttr = (condition) => condition ? \"\" : void 0;\n\n// src/switch.tsx\nimport { useMemo } from \"react\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props);\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(() => ({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: 0,\n    ...styles.container\n  }), [styles.container]);\n  const trackStyles = useMemo(() => ({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track\n  }), [styles.track]);\n  const labelStyles = useMemo(() => ({\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label\n  }), [spacing, styles.label]);\n  return /* @__PURE__ */ React.createElement(chakra.label, {\n    ...getRootProps(),\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles\n  }, /* @__PURE__ */ React.createElement(\"input\", {\n    className: \"chakra-switch__input\",\n    ...getInputProps({}, ref)\n  }), /* @__PURE__ */ React.createElement(chakra.span, {\n    ...getCheckboxProps(),\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }, /* @__PURE__ */ React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })), children && /* @__PURE__ */ React.createElement(chakra.span, {\n    className: \"chakra-switch__label\",\n    ...getLabelProps(),\n    __css: labelStyles\n  }, children));\n});\nSwitch.displayName = \"Switch\";\nexport {\n  Switch\n};\n","import React, { Fragment, ReactElement, ReactNode } from 'react';\nimport { RmgLabel } from '../rmg-label';\nimport { RmgDebouncedInput } from '../rmg-debounced-input';\nimport { Flex, InputProps, Switch } from '@chakra-ui/react';\nimport { RmgDebouncedTextarea } from '../rmg-debounced-textarea';\nimport { RmgSelect } from '../rmg-select';\nimport { RmgThrottledSlider } from '../rmg-throttled-slider';\n\ntype inputField = {\n    type: 'input';\n    value: string;\n    placeholder?: string;\n    onChange?: (value: string) => void;\n    variant?: InputProps['type'];\n    validator?: (value: string) => boolean;\n    debouncedDelay?: number;\n    optionList?: string[];\n};\n\ntype textareaField = {\n    type: 'textarea';\n    value: string;\n    placeholder?: string;\n    onChange?: (value: string) => void;\n};\n\ntype sliderField = {\n    type: 'slider';\n    value: number;\n    min: number;\n    max: number;\n    step?: number;\n    onChange?: (value: number) => void;\n    leftIcon?: ReactElement;\n    rightIcon?: ReactElement;\n};\n\ntype selectField<T extends string | number> = {\n    type: 'select';\n    value?: T;\n    options: Record<T, string>; // { value: displayText }\n    onChange?: (value: T) => void;\n    disabledOptions?: T[];\n    isInvalid?: boolean;\n};\n\ntype switchField = {\n    type: 'switch';\n    isChecked: boolean;\n    isDisabled?: boolean;\n    onChange?: (value: boolean) => void;\n};\n\ntype customField = {\n    type: 'custom';\n    component: ReactNode;\n};\n\nexport type RmgFieldsField<T extends string | number = string | number> = (\n    | inputField\n    | textareaField\n    | sliderField\n    | selectField<T>\n    | switchField\n    | customField\n) & {\n    label: string;\n    minW?: `${number}px` | number | 'full';\n    hidden?: boolean;\n    oneLine?: boolean;\n};\n\nexport interface RmgFieldsProps<T extends string | number> {\n    fields: RmgFieldsField<T>[];\n    noLabel?: boolean;\n    minW?: `${number}px` | number | 'full';\n}\n\nexport function RmgFields<T extends string | number>(props: RmgFieldsProps<T>) {\n    const { fields, noLabel, minW } = props;\n\n    return (\n        <Flex wrap=\"wrap\">\n            {fields.map((field, i) => {\n                if (field.hidden) {\n                    return <Fragment key={i} />;\n                }\n                const actualMinW = field.minW || minW;\n                const isMwFull = actualMinW === 'full';\n\n                return (\n                    <RmgLabel\n                        key={i}\n                        className={isMwFull ? 'mw-full' : ''}\n                        label={field.label}\n                        flex={isMwFull ? undefined : 1}\n                        minW={isMwFull ? undefined : actualMinW}\n                        noLabel={noLabel}\n                        oneLine={field.oneLine}\n                    >\n                        {(field => {\n                            switch (field.type) {\n                                case 'input':\n                                    return (\n                                        <RmgDebouncedInput\n                                            placeholder={field.placeholder}\n                                            defaultValue={field.value}\n                                            type={field.variant}\n                                            validator={field.validator}\n                                            onDebouncedChange={field.onChange}\n                                            delay={field.debouncedDelay}\n                                            optionList={field.optionList}\n                                        />\n                                    );\n                                case 'textarea':\n                                    return (\n                                        <RmgDebouncedTextarea\n                                            placeholder={field.placeholder}\n                                            defaultValue={field.value}\n                                            onDebouncedChange={field.onChange}\n                                        />\n                                    );\n                                case 'slider':\n                                    return (\n                                        <RmgThrottledSlider\n                                            defaultValue={field.value}\n                                            min={field.min}\n                                            max={field.max}\n                                            step={field.step}\n                                            onThrottledChange={field.onChange}\n                                            leftIcon={field.leftIcon}\n                                            rightIcon={field.rightIcon}\n                                        />\n                                    );\n                                case 'select':\n                                    return (\n                                        <RmgSelect\n                                            defaultValue={field.value}\n                                            onChange={({ target: { value } }) =>\n                                                field.onChange?.(\n                                                    (typeof field.value === 'number'\n                                                        ? Number(value)\n                                                        : value.toString()) as T\n                                                )\n                                            }\n                                            options={field.options}\n                                            disabledOptions={field.disabledOptions}\n                                            isInvalid={field.isInvalid}\n                                        />\n                                    );\n                                case 'switch':\n                                    return (\n                                        <Switch\n                                            isChecked={field.isChecked}\n                                            isDisabled={field.isDisabled}\n                                            onChange={({ target: { checked } }) => field.onChange?.(checked)}\n                                        />\n                                    );\n                                case 'custom':\n                                    return field.component;\n                                default:\n                                    return <div />;\n                            }\n                        })(field)}\n                    </RmgLabel>\n                );\n            })}\n        </Flex>\n    );\n}\n"],"names":["cx","__name","classNames","filter","Boolean","join","dataAttr","condition","Switch","forwardRef","props","ref","styles","useMultiStyleConfig","spacing","children","ownProps","omitThemingProps","state","getInputProps","getCheckboxProps","getRootProps","getLabelProps","useCheckbox","containerStyles","useMemo","display","position","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","React","createElement","chakra","className","__css","_jsx","span","thumb","isChecked","isHovered","displayName","RmgFields","fields","noLabel","minW","Flex","field","Fragment","actualMinW","isMwFull","RmgLabel","oneLine","field2","RmgDebouncedInput","placeholder","value","variant","validator","onChange","debouncedDelay","optionList","RmgDebouncedTextarea","RmgThrottledSlider","min","max","step","leftIcon","rightIcon","RmgSelect","_a","options","disabledOptions","isInvalid","isDisabled","checked","component"],"mappings":"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"}