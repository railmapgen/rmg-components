{"version":3,"file":"rmg-multi-select-32e8e5b2.js","sources":["../../node_modules/@chakra-ui/checkbox/dist/chunk-6XFPBTDN.mjs","../../node_modules/@chakra-ui/checkbox/dist/chunk-DFEUIRKX.mjs","../../node_modules/@chakra-ui/checkbox/dist/chunk-LS5YNJYH.mjs","../../src/rmg-multi-select/rmg-multi-select.tsx"],"sourcesContent":["// src/checkbox-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n});\n\nexport {\n  CheckboxGroupProvider,\n  useCheckboxGroupContext\n};\n","// src/checkbox-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction CheckIcon(props) {\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      width: \"1.2em\",\n      viewBox: \"0 0 12 10\",\n      style: {\n        fill: \"none\",\n        strokeWidth: 2,\n        stroke: \"currentColor\",\n        strokeDasharray: 16\n      },\n      ...props,\n      children: /* @__PURE__ */ jsx(\"polyline\", { points: \"1.5 6 4.5 9 10.5 1\" })\n    }\n  );\n}\nfunction IndeterminateIcon(props) {\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      width: \"1.2em\",\n      viewBox: \"0 0 24 24\",\n      style: { stroke: \"currentColor\", strokeWidth: 4 },\n      ...props,\n      children: /* @__PURE__ */ jsx(\"line\", { x1: \"21\", x2: \"3\", y1: \"12\", y2: \"12\" })\n    }\n  );\n}\nfunction CheckboxIcon(props) {\n  const { isIndeterminate, isChecked, ...rest } = props;\n  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return isChecked || isIndeterminate ? /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      children: /* @__PURE__ */ jsx(BaseIcon, { ...rest })\n    }\n  ) : null;\n}\n\nexport {\n  CheckboxIcon\n};\n","import {\n  useCheckboxGroupContext\n} from \"./chunk-6XFPBTDN.mjs\";\nimport {\n  CheckboxIcon\n} from \"./chunk-DFEUIRKX.mjs\";\nimport {\n  useCheckbox\n} from \"./chunk-3NTD6TBK.mjs\";\n\n// src/checkbox.tsx\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group, ...props };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */ jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  let onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const iconStyles = useMemo(\n    () => ({\n      animation: state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon\n    }),\n    [iconColor, iconSize, , state.isIndeterminate, styles.icon]\n  );\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      __css: { ...rootStyles, ...styles.container },\n      className: cx(\"chakra-checkbox\", className),\n      ...getRootProps(),\n      children: [\n        /* @__PURE__ */ jsx(\n          \"input\",\n          {\n            className: \"chakra-checkbox__input\",\n            ...getInputProps(inputProps, ref)\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            __css: { ...controlStyles, ...styles.control },\n            className: \"chakra-checkbox__control\",\n            ...getCheckboxProps(),\n            children: clonedIcon\n          }\n        ),\n        children && /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            className: \"chakra-checkbox__label\",\n            ...getLabelProps(),\n            __css: {\n              marginStart: spacing,\n              ...styles.label\n            },\n            children\n          }\n        )\n      ]\n    }\n  );\n});\nCheckbox.displayName = \"Checkbox\";\n\nexport {\n  Checkbox\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Badge,\n    Box,\n    Checkbox,\n    List,\n    ListItem,\n    Popover,\n    PopoverAnchor,\n    PopoverBody,\n    PopoverContent,\n    useOutsideClick,\n    useStyleConfig,\n} from '@chakra-ui/react';\n\ntype Selection = {\n    label: string;\n    value: string;\n    disabled?: boolean;\n};\n\nexport interface RmgMultiSelectProps {\n    displayValue: string;\n    selections: Selection[];\n    defaultValue: string[];\n    onChange?: (value: string[]) => void;\n}\n\nexport const RmgMultiSelect = (props: RmgMultiSelectProps) => {\n    const { displayValue, selections, defaultValue, onChange } = props;\n\n    const styles = useStyleConfig('RmgMultiSelect');\n\n    const [value, setValue] = useState(defaultValue);\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const dropdownRef = useRef<HTMLDivElement>(null);\n\n    useOutsideClick({ ref: wrapperRef, handler: () => setIsDropdownOpen(false) });\n\n    useEffect(() => {\n        defaultValue.toString() && setValue(defaultValue);\n    }, [defaultValue.toString()]);\n\n    const selectedCount = value.filter(val => selections.some(selection => selection.value === val)).length;\n\n    const handleCheck = (selection: Selection, checked: boolean) => {\n        if (checked) {\n            if (!value.includes(selection.value)) {\n                const nextValue = [...value, selection.value];\n                setValue(nextValue);\n                onChange?.(nextValue);\n            }\n        } else {\n            const nextValue = value.filter(val => val !== selection.value);\n            setValue(nextValue);\n            onChange?.(nextValue);\n        }\n    };\n\n    return (\n        <Box ref={wrapperRef} sx={styles}>\n            <Popover placement=\"bottom-start\" isOpen={isDropdownOpen} autoFocus={false}>\n                <PopoverAnchor>\n                    <div\n                        className=\"rmg-multi-select__wrapper\"\n                        role=\"combobox\"\n                        aria-expanded={isDropdownOpen}\n                        aria-controls={dropdownRef.current?.id}\n                        aria-label={displayValue}\n                        onClick={() => setIsDropdownOpen(prevState => !prevState)}\n                    >\n                        <div className={`rmg-multi-select__field ${isDropdownOpen ? 'active' : ''}`}>\n                            <span>{displayValue}</span>\n                            <Badge colorScheme={selectedCount ? 'blue' : undefined} role=\"status\">\n                                {selectedCount}/{selections.length}\n                            </Badge>\n                        </div>\n                        <div className=\"rmg-multi-select__icon-wrapper\">\n                            <svg viewBox=\"0 0 24 24\">\n                                <path fill=\"currentColor\" d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n                            </svg>\n                        </div>\n                    </div>\n                </PopoverAnchor>\n\n                <PopoverContent ref={dropdownRef}>\n                    <PopoverBody>\n                        <List>\n                            {selections.map(selection => (\n                                <ListItem key={selection.value.toString()}>\n                                    <Checkbox\n                                        isChecked={value.includes(selection.value)}\n                                        isDisabled={selection.disabled}\n                                        onChange={({ target: { checked } }) => handleCheck(selection, checked)}\n                                    >\n                                        {selection.label}\n                                    </Checkbox>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </PopoverBody>\n                </PopoverContent>\n            </Popover>\n        </Box>\n    );\n};\n"],"names":["CheckboxGroupProvider","useCheckboxGroupContext","createContext","CheckIcon","props","jsx","chakra","IndeterminateIcon","CheckboxIcon","isIndeterminate","isChecked","rest","BaseIcon","controlStyles","rootStyles","checkAnim","keyframes","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","forwardRef","ref","group","mergedProps","styles","useMultiStyleConfig","ownProps","omitThemingProps","spacing","className","children","iconColor","iconSize","icon","isCheckedProp","isDisabled","onChangeProp","inputProps","onChange","callAll","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","useCheckbox","iconStyles","useMemo","clonedIcon","cloneElement","jsxs","cx","RmgMultiSelect","displayValue","selections","defaultValue","useStyleConfig","value","setValue","useState","isDropdownOpen","setIsDropdownOpen","wrapperRef","useRef","dropdownRef","useOutsideClick","useEffect","selectedCount","val","selection","handleCheck","checked","nextValue","Box","Popover","PopoverAnchor","_a","prevState","Badge","PopoverContent","PopoverBody","List","ListItem"],"mappings":"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"}