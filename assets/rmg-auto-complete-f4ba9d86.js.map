{"version":3,"file":"rmg-auto-complete-f4ba9d86.js","sources":["../../src/rmg-auto-complete/popover-implement/rmg-auto-complete.tsx"],"sourcesContent":["import {\n    Box,\n    Button,\n    List,\n    ListItem,\n    Popover,\n    PopoverAnchor,\n    PopoverBody,\n    PopoverContent,\n    useOutsideClick,\n} from '@chakra-ui/react';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { RmgDebouncedInput } from '../../rmg-debounced-input';\n\nexport interface RmgAutoCompleteProps<T> {\n    data: T[];\n    displayValue: (item: T) => string;\n    displayHandler?: (item: T) => ReactElement | string | number;\n    predicate: (item: T, input: string) => boolean;\n    defaultValue?: T;\n    onChange?: (item: T) => void;\n    isInvalid?: boolean; // inherit from chakra input\n}\n\nexport function RmgAutoComplete<T extends { id: string }>(props: RmgAutoCompleteProps<T>) {\n    const { data, displayValue, displayHandler, predicate, defaultValue, onChange, isInvalid } = props;\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const [inputValue, setInputValue] = useState(defaultValue ? displayValue(defaultValue) : '');\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n    useOutsideClick({ ref: wrapperRef, handler: () => setIsDropdownOpen(false) });\n\n    useEffect(\n        () => {\n            if (defaultValue) {\n                setInputValue(displayValue(defaultValue));\n            } else {\n                setInputValue('');\n            }\n        },\n        // force update input field when data is changed\n        // to prevent last selected text remains on the field if defaultValue are undefined before and after\n        [JSON.stringify(data), JSON.stringify(defaultValue)]\n    );\n\n    const handleSelect = (item: T) => {\n        setInputValue(displayValue(item));\n        setIsDropdownOpen(false);\n        onChange?.(item);\n    };\n\n    return (\n        <Box ref={wrapperRef}>\n            <Popover placement=\"bottom-start\" isOpen={isDropdownOpen} autoFocus={false}>\n                <PopoverAnchor>\n                    <RmgDebouncedInput\n                        defaultValue={inputValue}\n                        onDebouncedChange={val => setInputValue(val)}\n                        onFocus={() => setIsDropdownOpen(true)}\n                        isInvalid={isInvalid}\n                    />\n                </PopoverAnchor>\n\n                <PopoverContent w=\"unset\" minW={200}>\n                    <PopoverBody p={0}>\n                        <List role=\"menu\" maxH={270} overflowY=\"auto\">\n                            {data\n                                .filter(item => predicate(item, inputValue))\n                                .map(item => (\n                                    <ListItem key={item.id} role=\"none\">\n                                        <Button\n                                            role=\"menuitem\"\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            justifyContent=\"flex-start\"\n                                            flexShrink={0}\n                                            borderRadius={0}\n                                            w=\"100%\"\n                                            onClick={() => handleSelect(item)}\n                                        >\n                                            {displayHandler ? displayHandler(item) : displayValue(item)}\n                                        </Button>\n                                    </ListItem>\n                                ))}\n                        </List>\n                    </PopoverBody>\n                </PopoverContent>\n            </Popover>\n        </Box>\n    );\n}\n"],"names":["RmgAutoComplete","props","data","displayValue","displayHandler","predicate","defaultValue","onChange","isInvalid","wrapperRef","useRef","inputValue","setInputValue","useState","isDropdownOpen","setIsDropdownOpen","useOutsideClick","useEffect","handleSelect","item","jsx","Box","jsxs","Popover","PopoverAnchor","RmgDebouncedInput","val","PopoverContent","PopoverBody","List","ListItem","Button"],"mappings":"6ZAwBO,SAAAA,EAAAC,EAAA,CACH,KAAA,CAAA,KAAAC,EAAA,aAAAC,EAAA,eAAAC,EAAA,UAAAC,EAAA,aAAAC,EAAA,SAAAC,EAAA,UAAAC,CAAA,EAAAP,EAEAQ,EAAAC,SAAA,IAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAP,EAAAH,EAAAG,CAAA,EAAA,EAAA,EACA,CAAAQ,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEAG,EAAA,CAAA,IAAAP,EAAA,QAAA,IAAAM,EAAA,EAAA,CAAA,CAAA,EAEAE,EAAA,UAAA,IAAA,CAGYL,EADJN,EACIH,EAAAG,CAAA,EAEA,EAFA,CAGJ,EACJ,CAAA,KAAA,UAAAJ,CAAA,EAAA,KAAA,UAAAI,CAAA,CAAA,CAGmD,EAGvD,MAAAY,EAAAC,GAAA,CACIP,EAAAT,EAAAgB,CAAA,CAAA,EACAJ,EAAA,EAAA,EACAR,GAAA,MAAAA,EAAAY,EAAe,EAGnB,OAAAC,EAAAA,IAAAC,EAAA,CAAA,IAAAZ,EAAA,SAAAa,OAAAC,EAAA,CAAA,UAAA,eAAA,OAAAT,EAAA,UAAA,GAAA,SAAA,CAGYM,MAAAI,EAAA,CAAA,SAAAJ,EAAA,IACIK,EAAC,CAAA,aAAAd,EACiB,kBAAAe,GAAAd,EAAAc,CAAA,EAC6B,QAAA,IAAAX,EAAA,EAAA,EACN,UAAAP,CACrC,CAAA,EAAA,EAERY,MAAAO,EAAA,CAAA,EAAA,QAAA,KAAA,IAAA,SAAAP,MAAAQ,EAAA,CAAA,EAAA,EAAA,SAAAR,EAAA,IAAAS,EAAA,CAAA,KAAA,OAAA,KAAA,IAAA,UAAA,OAAA,SAAA3B,EAAA,OAAAiB,GAAAd,EAAAc,EAAAR,CAAA,CAAA,EAAA,IAAAQ,GAAAC,MAAAU,EAAA,CAAA,KAAA,OAAA,SAAAV,EAAA,IASwBW,EAAC,CAAA,KAAA,WACQ,KAAA,KACA,QAAA,QACG,eAAA,aACO,WAAA,EACH,aAAA,EACE,EAAA,OACZ,QAAA,IAAAb,EAAAC,CAAA,EAC8B,SAAAf,EAAAA,EAAAe,CAAA,EAAAhB,EAAAgB,CAAA,CAE0B,CAAA,CAAA,EAAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAMtF,CAAA,CAAA,CAAA,CAAA,CAIhB"}