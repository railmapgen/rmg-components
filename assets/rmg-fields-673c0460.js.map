{"version":3,"file":"rmg-fields-673c0460.js","sources":["../../node_modules/@chakra-ui/switch/dist/chunk-B22GDMVL.mjs","../../src/rmg-fields/rmg-fields.tsx"],"sourcesContent":["// src/switch.tsx\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props);\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container\n    }),\n    [styles.container]\n  );\n  const trackStyles = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track\n    }),\n    [styles.track]\n  );\n  const labelStyles = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label\n    }),\n    [spacing, styles.label]\n  );\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...getRootProps(),\n      className: cx(\"chakra-switch\", props.className),\n      __css: containerStyles,\n      children: [\n        /* @__PURE__ */ jsx(\"input\", { className: \"chakra-switch__input\", ...getInputProps({}, ref) }),\n        /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            ...getCheckboxProps(),\n            className: \"chakra-switch__track\",\n            __css: trackStyles,\n            children: /* @__PURE__ */ jsx(\n              chakra.span,\n              {\n                __css: styles.thumb,\n                className: \"chakra-switch__thumb\",\n                \"data-checked\": dataAttr(state.isChecked),\n                \"data-hover\": dataAttr(state.isHovered)\n              }\n            )\n          }\n        ),\n        children && /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            className: \"chakra-switch__label\",\n            ...getLabelProps(),\n            __css: labelStyles,\n            children\n          }\n        )\n      ]\n    }\n  );\n});\nSwitch.displayName = \"Switch\";\n\nexport {\n  Switch\n};\n","import React, { Fragment, ReactElement, ReactNode } from 'react';\nimport { RmgLabel } from '../rmg-label';\nimport { RmgDebouncedInput } from '../rmg-debounced-input';\nimport { Flex, InputProps, Switch } from '@chakra-ui/react';\nimport { RmgDebouncedTextarea } from '../rmg-debounced-textarea';\nimport { RmgSelect } from '../rmg-select';\nimport { RmgThrottledSlider } from '../rmg-throttled-slider';\n\ntype inputField = {\n    type: 'input';\n    value: string;\n    placeholder?: string;\n    onChange?: (value: string) => void;\n    variant?: InputProps['type'];\n    validator?: (value: string) => boolean;\n    debouncedDelay?: number;\n    optionList?: string[];\n};\n\ntype textareaField = {\n    type: 'textarea';\n    value: string;\n    placeholder?: string;\n    onChange?: (value: string) => void;\n};\n\ntype sliderField = {\n    type: 'slider';\n    value: number;\n    min: number;\n    max: number;\n    step?: number;\n    onChange?: (value: number) => void;\n    leftIcon?: ReactElement;\n    rightIcon?: ReactElement;\n};\n\ntype selectField<T extends string | number> = {\n    type: 'select';\n    value?: T;\n    options: Record<T, string>; // { value: displayText }\n    onChange?: (value: T) => void;\n    disabledOptions?: T[];\n    isInvalid?: boolean;\n};\n\ntype switchField = {\n    type: 'switch';\n    isChecked: boolean;\n    isDisabled?: boolean;\n    onChange?: (value: boolean) => void;\n};\n\ntype customField = {\n    type: 'custom';\n    component: ReactNode;\n};\n\nexport type RmgFieldsField<T extends string | number = string | number> = (\n    | inputField\n    | textareaField\n    | sliderField\n    | selectField<T>\n    | switchField\n    | customField\n) & {\n    label: string;\n    minW?: `${number}px` | number | 'full';\n    hidden?: boolean;\n    oneLine?: boolean;\n};\n\nexport interface RmgFieldsProps<T extends string | number> {\n    fields: RmgFieldsField<T>[];\n    noLabel?: boolean;\n    minW?: `${number}px` | number | 'full';\n}\n\nexport function RmgFields<T extends string | number>(props: RmgFieldsProps<T>) {\n    const { fields, noLabel, minW } = props;\n\n    return (\n        <Flex wrap=\"wrap\">\n            {fields.map((field, i) => {\n                if (field.hidden) {\n                    return <Fragment key={i} />;\n                }\n                const actualMinW = field.minW || minW;\n                const isMwFull = actualMinW === 'full';\n\n                return (\n                    <RmgLabel\n                        key={i}\n                        className={isMwFull ? 'mw-full' : ''}\n                        label={field.label}\n                        flex={isMwFull ? undefined : 1}\n                        minW={isMwFull ? undefined : actualMinW}\n                        noLabel={noLabel}\n                        oneLine={field.oneLine}\n                    >\n                        {(field => {\n                            switch (field.type) {\n                                case 'input':\n                                    return (\n                                        <RmgDebouncedInput\n                                            placeholder={field.placeholder}\n                                            defaultValue={field.value}\n                                            type={field.variant}\n                                            validator={field.validator}\n                                            onDebouncedChange={field.onChange}\n                                            delay={field.debouncedDelay}\n                                            optionList={field.optionList}\n                                        />\n                                    );\n                                case 'textarea':\n                                    return (\n                                        <RmgDebouncedTextarea\n                                            placeholder={field.placeholder}\n                                            defaultValue={field.value}\n                                            onDebouncedChange={field.onChange}\n                                        />\n                                    );\n                                case 'slider':\n                                    return (\n                                        <RmgThrottledSlider\n                                            defaultValue={field.value}\n                                            min={field.min}\n                                            max={field.max}\n                                            step={field.step}\n                                            onThrottledChange={field.onChange}\n                                            leftIcon={field.leftIcon}\n                                            rightIcon={field.rightIcon}\n                                        />\n                                    );\n                                case 'select':\n                                    return (\n                                        <RmgSelect\n                                            defaultValue={field.value}\n                                            onChange={({ target: { value } }) =>\n                                                field.onChange?.(\n                                                    (typeof field.value === 'number'\n                                                        ? Number(value)\n                                                        : value.toString()) as T\n                                                )\n                                            }\n                                            options={field.options}\n                                            disabledOptions={field.disabledOptions}\n                                            isInvalid={field.isInvalid}\n                                        />\n                                    );\n                                case 'switch':\n                                    return (\n                                        <Switch\n                                            isChecked={field.isChecked}\n                                            isDisabled={field.isDisabled}\n                                            onChange={({ target: { checked } }) => field.onChange?.(checked)}\n                                        />\n                                    );\n                                case 'custom':\n                                    return field.component;\n                                default:\n                                    return <div />;\n                            }\n                        })(field)}\n                    </RmgLabel>\n                );\n            })}\n        </Flex>\n    );\n}\n"],"names":["Switch","forwardRef","props","ref","styles","useMultiStyleConfig","spacing","children","ownProps","omitThemingProps","state","getInputProps","getCheckboxProps","getRootProps","getLabelProps","useCheckbox","containerStyles","useMemo","trackStyles","labelStyles","jsxs","chakra","cx","jsx","dataAttr","RmgFields","fields","noLabel","minW","Flex","field","Fragment","actualMinW","isMwFull","RmgLabel","field2","RmgDebouncedInput","RmgDebouncedTextarea","RmgThrottledSlider","RmgSelect","value","_a","checked"],"mappings":"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","x_google_ignoreList":[0]}