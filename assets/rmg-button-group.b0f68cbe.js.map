{"version":3,"file":"rmg-button-group.b0f68cbe.js","sources":["../../src/rmg-button-group/rmg-button-group.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@chakra-ui/react';\n\ntype ButtonGroupSelection<T> = {\n    label: string;\n    value: T;\n    disabled?: boolean;\n};\n\ntype RmgButtonGroupSingleSelectProps<T> = {\n    selections: ButtonGroupSelection<T>[];\n    defaultValue: T;\n    onChange?: (value: T) => void;\n    multiSelect?: false;\n};\n\ntype RmgButtonGroupMultiSelectProps<T> = {\n    selections: ButtonGroupSelection<T>[];\n    defaultValue: T[];\n    onChange?: (value: T[]) => void;\n    multiSelect: true;\n};\n\ntype RmgButtonGroupProps<T> = RmgButtonGroupSingleSelectProps<T> | RmgButtonGroupMultiSelectProps<T>;\n\nexport function RmgButtonGroup<T extends string | boolean>(props: RmgButtonGroupProps<T>) {\n    const { selections, defaultValue, onChange, multiSelect } = props;\n\n    const [value, setValue] = useState(defaultValue);\n\n    useEffect(() => {\n        defaultValue.toString() && setValue(defaultValue);\n    }, [defaultValue.toString()]);\n\n    const handleToggle = (val: T) => {\n        if (multiSelect) {\n            const prevValue = value as T[];\n            const nextValue = prevValue.includes(val) ? prevValue.filter(v => v !== val) : [...prevValue, val];\n\n            setValue(nextValue);\n            (onChange as RmgButtonGroupMultiSelectProps<T>['onChange'])?.(nextValue);\n        } else {\n            setValue(val);\n            (onChange as RmgButtonGroupSingleSelectProps<T>['onChange'])?.(val);\n        }\n    };\n\n    return (\n        <ButtonGroup size=\"xs\" isAttached colorScheme=\"primary\" variant=\"outline\">\n            {selections.map((selection, i) => {\n                const isSelected =\n                    (typeof value === 'object' && value.includes(selection.value)) || value === selection.value;\n\n                // TODO: fix overlapped/missing border\n                const mr = i !== selections.length - 1 && !isSelected ? '-px' : undefined;\n\n                return (\n                    <Button\n                        key={selection.value.toString()}\n                        role=\"checkbox\"\n                        aria-checked={isSelected}\n                        variant={isSelected ? 'solid' : 'outline'}\n                        mr={mr}\n                        isDisabled={selection.disabled}\n                        onClick={() => handleToggle(selection.value)}\n                    >\n                        {selection.label}\n                    </Button>\n                );\n            })}\n        </ButtonGroup>\n    );\n}\n"],"names":["RmgButtonGroup","props","selections","defaultValue","onChange","multiSelect","value","setValue","useState","useEffect","handleToggle","__name","val","prevValue","nextValue","v","_jsx","ButtonGroup","selection","i","isSelected","mr","Button","disabled","label"],"mappings":"kLAyBO,SAAAA,EAAAC,EAAA,CACH,KAAA,CAAM,WAAAC,EAAEA,aAAAA,EAAYC,SAAAA,EAAcC,YAAAA,CAAUC,EAAAA,EAE5C,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAAL,CAAA,EAEAM,EAAAA,QAAAA,UAAAA,IAAAA,CACIN,EAAAA,SAAAA,GAAAA,EAAAA,CAAAA,CAAgD,EAAA,CAAAA,EAAA,SAAA,CAAA,CAAA,EAGpD,MAAAO,EAAAC,EAAAC,GAAA,CACI,GAAAP,EAAA,CACI,MAAAQ,EAAAP,EACAQ,EAAAD,EAAA,SAAAD,CAAA,EAAAC,EAAA,OAAAE,GAAAA,IAAAH,CAAA,EAAA,CAAA,GAAAC,EAAAD,CAAA,EAEAL,EAAAA,CAAAA,EACAH,GAAA,MAAAA,EAAAU,EAAuE,MAEvEP,EAAAA,CAAAA,EACAH,GAAA,MAAAA,EAAAQ,EACJ,EAVJ,gBAaA,OAAAI,EAAAC,EAAA,CACgB,KAAA,KAAM,WAAA,GAAe,YAAA,UAAa,QAAA,UAAkB,SAAAf,EAAA,IAAA,CAAAgB,EAAAC,IAAA,CAExD,MAAAC,EAAA,OAAAd,GAAA,UAAAA,EAAA,SAAAY,EAAA,KAAA,GAAAZ,IAAAY,EAAA,MAIAG,EAAAF,IAAAjB,EAAA,OAAA,GAAA,CAAAkB,EAAA,MAAA,OAEA,OAAAJ,EAAAM,EAAA,CACW,KAAA,WAEE,eAAAF,EACSA,QAAAA,EAAAA,QAAAA,UACkB,GAAAC,EAChC,WAAAH,EAAA,SACsBK,QAAAA,IAAAA,EAAAA,EAAAA,KAAAA,EACqB,SAAAL,EAAA,KAEhCM,EAAAA,EAAAA,MAAAA,SAAAA,CAAAA,CARoB,CAAA,CAW1C,CAAA,CAGb,CA/COb,EAAAX,EAAA"}